Контейнеризация
Урок 2. Механизмы контрольных групп cgroup
cgroup v.2
Цель семинара понять, как приложения могут быть ограничены (напр по памяти) контрольными группами


apt install c group-tools - установим утилиту

Изолируем систеему и войдем в изолир простр имён
unshare --fork --pid --mount-proc bash

Убедимся, что мы в изолированной системе, посмотрим процессы
ps aux

Создадим в системе контрольную группу для пользователя USER
(будем ограничивать память и cpu)
cgcreate -a $USER -g memory:mytestgroup -g cpu:mytestgroup

Проверим, что группа создалась
ls /sys/fs/cgroup/mytestgroup

Выдем из того, что мы создавали ранее - из изолир простр имён
exit

Войдем в контр группу (войдём в изолир процесс, который ограничивается по памяти)
cgexec -g memory:mytestgroup bash

exit

_________________________________________________________________________________
LXC контейнеры
установим 
apt install lxc lxc-templates

или полный набор комманд выглядит так:
sudo apt-get install lxc debootstrap bridge-utils lxc-templates

Создаём LXC контейнер
с именем test123 на основе образа ubuntu
lxc-create -n test123 -t ubuntu

Проверим, созданный контейнер
lxc-ls

Проверить, что контейнер не запущен или остановить контейнер
lxc-stop test123

Посмотрим файл конфигурации контейнера test123
vi /var/lib/lxc/test123/config

-------------------------------------------------------
# Common configuration
lxc.include = /usr/share/lxc/config/ubuntu.common.conf

# Container specific configuration
lxc.uts.name = beta
lxc.rootfs.path = dir:/var/lib/lxc/test123/rootfs -путь
lxc.uts.name = test123 - имя
lxc.arch = amd64

# Network configuration
lxc.net.0.type = veth
lxc.net.0.flags = up
lxc.net.0.link = br0
lxc.net.0.hwaddr = 4a:49:43:49:79:bf
lxc.net.0.ipv4.address = 10.2.3.5/24
lxc.net.0.ipv6.address = 2003:db8:1:0:214:1234:fe0b:3597
----------------------------------------------------------

Сделаем ограничение по памяти и добавим автозапуск
добавим строки
lxc.cgroup2.memory.max = 256M
lxc.start.auto = 1

*в редакторе vim режим вставки активируется - Ins
*из режима вставки в режим команд - ESC
*активировать режим команд - набрать двоеточие : 
*сохранить и выйти - :wq
*выйти без сохранения :q!

В хостовой системе проверим значения памяти 
free -m

Запустим наш контейнер test123
lxc-start test123

Войдём внутрь контейнера 
lxc-attach test123

Проверим значения памяти внутри контейнера
выделеное значение должно совпасть с тем, что мы записали в конф файл, т.е 256М
free -m
(у меня не сработало!)
 
Посмотреть использование ресурсов нашим контейнером
ls /sys/fs/cgroup/lxc.payload.test123/

Проверить в каких контейнерах активирован автозапуск, и какие контейнеры запущены, ip адрес
lxc-ls -f

можем пропинговать наш контейнер из хост системы ping 10.0.3.208

Остановим контейнер
lxc-stop test123

Удалим его
lxc-destroy test123





------------------------------------------------------------------------------------------------

Создадим два контейнера и сделаем ping из одного в другой

Создаём два контейнера
lxc-create -n test1 -t ubuntu
lxc-create -n test2 -t ubuntu

Проверим их
lxc-ls -f

Запустим их
lxc-start test1
lxc-start test2

Проверим
lxc-ls -f

Войдём в первый контейнер и увидим его Ip адрес
lxc-attach test1
ip a
запомним 10.0.3.248
exit

Войдём во второй контейнер и увидим его Ip адрес
lxc-attach test2
ip a
запомним 10.0.3.219

пропингуем test1 
ping 10.0.3.248 - пинг есть!
exit

Проверим в обратную сторону
lxc-attach test1
ping 10.0.3.219 - пинг есть!
exit

------------------------------------------

Задача: В каждый контейнер добавить статический ip адрес
(в config файл)


Посмотрим файл конфигурации контейнера test1
vi /var/lib/lxc/test1/config

Добавим строку
lxc.net.0.ipv4.address = 10.0.3.25/24

Посмотрим файл конфигурации контейнера test2
vi /var/lib/lxc/test2/config

Добавим строку
lxc.net.0.ipv4.address = 10.0.3.35/24

Посмотрим 
lxc-ls -f
адреса прежние

Перезапустим контейнеры
lxc-stop test1
lxc-stop test2

lxc-start test1
lxc-start test2

Проверяем и видим стаич адреса
lxc-ls -f
NAME  STATE   AUTOSTART GROUPS IPV4                  IPV6 UNPRIVILEGED
test1 RUNNING 0         -      10.0.3.248, 10.0.3.25 -    false
test2 RUNNING 0         -      10.0.3.219, 10.0.3.35 -    false

Пропингуем их хост системы
ping 10.0.3.25 - работает
ping 10.0.3.35 - работает

Остановим
lxc-stop test1
lxc-stop test2


---------------------------------------------

Задача: запустить созданные и остановленные контейнеры без
входа в контейнер (т.е не используя команду lxc-attach)


lxc-execute -n test1 /bin/ls

lxc-execute -n test1 /bin/ping 10.0.3.25

lxc-execute -n test1 /bin/hostname


-----------------------------------------------

Задача: войти в запущенный контейнер и выполнить команду
rm-rf - удалить корень

Запустили контейнер
lxc-start test1

Вошли в контейнер
lxc-attach -n test1

Убедились
hostname

Удаляем систему
rm-rf /--no-preserve-root
пошло удаление системы
команды ls, ping, pwd, hostname не работают
контейнер сломан!
exit

Перешли в хостовую систему, она замечательно работает!

Для этого нужны контейнеры.











































